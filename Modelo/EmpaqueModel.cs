// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Modelo;
//
//    var empaqueModel = EmpaqueModel.FromJson(jsonString);

namespace Modelo
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class EmpaqueModel
    {
        [JsonProperty("ID")]
        public long Id { get; set; }

        [JsonProperty("Rut")]
        public long Rut { get; set; }

        [JsonProperty("Email")]
        public string Email { get; set; }

        [JsonProperty("Password")]
        public string Password { get; set; }

        [JsonProperty("FirstName")]
        public string FirstName { get; set; }

        [JsonProperty("LastName")]
        public string LastName { get; set; }

        [JsonProperty("PhoneNumber")]
        public long PhoneNumber { get; set; }

        [JsonProperty("BirthDate")]
        public DateTimeOffset BirthDate { get; set; }

        [JsonProperty("Gender")]
        public long Gender { get; set; }

        [JsonProperty("Address")]
        public string Address { get; set; }

        [JsonProperty("Supermarket")]
        public long Supermarket { get; set; }

        [JsonProperty("TypeUser")]
        public long TypeUser { get; set; }

        [JsonProperty("JobTitle")]
        public string JobTitle { get; set; }
    }

    public partial class EmpaqueModel
    {
        public static List<EmpaqueModel> FromJson(string json) => JsonConvert.DeserializeObject<List<EmpaqueModel>>(json, Modelo.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<EmpaqueModel> self) => JsonConvert.SerializeObject(self, Modelo.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
